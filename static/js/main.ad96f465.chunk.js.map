{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","main","temp","Form","Control","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","id","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","description","wind","speed","toFixed","temp_max","sunrise","toLocaleTimeString","slice","humidity","temp_min","sunset","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oOAGMA,EACG,mCADHA,EAEI,2CAoFKC,MAhFf,WAAgB,IAAD,EAEeC,mBAAS,IAFxB,mBAEJC,EAFI,KAEGC,EAFH,OAGmBF,mBAAS,IAH5B,mBAGJG,EAHI,KAGKC,EAHL,KAgCP,OACI,yBAAKC,UAAmC,oBAAhBF,EAAQG,MAAyBH,EAAQG,KAAKC,KAAO,GAAM,WAAsB,OACrG,0BAAMF,UAAU,WACZ,yBAAKA,UAAU,cACX,kBAACG,EAAA,EAAKC,QAAN,CAAcJ,UAAU,aAAaK,KAAK,OAAOC,YAAY,YAAYC,SAAU,SAAAC,GAAC,OAAIX,EAASW,EAAEC,OAAOC,QAAQA,MAAOd,EAAOe,WA9BjI,SAAAC,GACK,UAAZA,EAAIC,KACJC,MAAM,GAAD,OAAIrB,EAAJ,qBAAyBG,EAAzB,iCAAuDH,IACvDsB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACFnB,EAAWmB,GACXrB,EAAS,IACTsB,QAAQC,IAAIF,UAyBhB,uBAAGG,GAAG,QAAN,eAEyB,oBAAhBvB,EAAQG,KAEjB,6BAEA,yBAAKD,UAAU,gBACf,yBAAKA,UAAU,YAAYF,EAAQwB,KAAnC,KAA2CxB,EAAQyB,IAAIC,SACvD,yBAAKxB,UAAU,QA3BP,SAACyB,GACjB,IAGIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EALS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAKzGL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAkBHE,CAAY,IAAIC,QAGvC,yBAAKnC,UAAU,OACf,yBAAKA,UAAU,YACf,yBAAKA,UAAU,eACf,yBAAKA,UAAU,QAAQoC,KAAKC,MAAMvC,EAAQG,KAAKC,MAA/C,SACA,yBAAKF,UAAU,WAAWF,EAAQA,QAAQ,GAAGwC,eAI7C,yBAAKtC,UAAU,YACf,yBAAKA,UAAU,mBAEX,yBAAKA,UAAU,cAAcqB,GAAG,SAAUvB,EAAQyC,KAAKC,MAAS,OAAOC,QAAQ,GAA/E,YACA,yBAAKzC,UAAU,cAAcqB,GAAG,WAAWe,KAAKC,MAAMvC,EAAQG,KAAKyC,UAAnE,aACA,yBAAK1C,UAAU,cAAcqB,GAAG,WAAW,IAAIc,KAA2B,IAAtBrC,EAAQyB,IAAIoB,SAAgBC,qBAAqBC,MAAM,EAAG,GAA9G,YAEA,yBAAK7C,UAAU,cAAcqB,GAAG,YAAYvB,EAAQG,KAAK6C,SAAzD,UACA,yBAAK9C,UAAU,cAAcqB,GAAG,WAAWe,KAAKC,MAAMvC,EAAQG,KAAK8C,UAAnE,YACA,yBAAK/C,UAAU,cAAcqB,GAAG,UAAU,IAAIc,KAA0B,IAArBrC,EAAQyB,IAAIyB,QAAeJ,qBAAqBC,MAAM,EAAG,GAA5G,eAOC,MCtELI,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZRC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6HzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,MAAK,SAAA8C,GACjCA,EAAaC,kB","file":"static/js/main.ad96f465.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\n\r\nconst api = {\r\n    key: \"55cd5902296b2efbc1c863821ff64719\",\r\n    base: \"https://api.openweathermap.org/data/2.5/\"\r\n};\r\n\r\n\r\nfunction App() {\r\n    \r\n    const [query, setQuery] = useState(\"\");\r\n    const [weather, setWeather] = useState({});\r\n\r\n\r\n        const search = evt => {\r\n            if (evt.key === \"Enter\") {\r\n                fetch(`${api.base}weather?q=${query}&units=imperial&APPID=${api.key}`)\r\n                    .then(res => res.json())\r\n                    .then(result => {\r\n                        setWeather(result);\r\n                        setQuery(\"\");\r\n                        console.log(result);\r\n                    });\r\n            }\r\n        }\r\n\r\n\r\n        const dateBuilder = (d) => {\r\n            let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n            let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n            \r\n            let day = days[d.getDay()];\r\n            let date = d.getDate();\r\n            let month = months[d.getMonth()];\r\n            let year = d.getFullYear();\r\n    \r\n            return `${day} ${date} ${month} ${year}`\r\n        }\r\n\r\n\r\n        return(\r\n            <div className={(typeof weather.main != \"undefined\") ? ((weather.main.temp > 67) ? \"app warm\" : \"app\") : \"app\"}>\r\n                <main className=\"mainApp\">\r\n                    <div className=\"search-box\">\r\n                        <Form.Control className=\"search-bar\" type=\"text\" placeholder=\"Search...\" onChange={e => setQuery(e.target.value)} value={query} onKeyPress={search} />\r\n                    </div>\r\n                    <p id=\"name\">Weather App</p>\r\n\r\n                    {(typeof weather.main != \"undefined\") ? (\r\n\r\n                    <div>\r\n                    \r\n                    <div className=\"location-box\">\r\n                    <div className=\"location\">{weather.name}, {weather.sys.country}</div>\r\n                    <div className=\"date\">{dateBuilder(new Date())}</div>\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                    <div className=\"col-md-6\">\r\n                    <div className=\"weather-box\">\r\n                    <div className=\"temp\">{Math.round(weather.main.temp)}°F</div>\r\n                    <div className=\"weather\">{weather.weather[0].description}</div>\r\n                    </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"col-md-6\">\r\n                    <div className=\"weatherInfo-box\">\r\n\r\n                        <div className=\"weatherInfo\" id=\"wind\">{((weather.wind.speed) / 2.237).toFixed(1)}mph Wind</div>\r\n                        <div className=\"weatherInfo\" id=\"tempMax\">{Math.round(weather.main.temp_max)}° High</div>\r\n                        <div className=\"weatherInfo\" id=\"sunrise\">{new Date(weather.sys.sunrise * 1000).toLocaleTimeString().slice(0, 5)} sunrise</div>\r\n\r\n                        <div className=\"weatherInfo\" id=\"humidity\">{weather.main.humidity}% rain</div>\r\n                        <div className=\"weatherInfo\" id=\"tempMin\">{Math.round(weather.main.temp_min)}° Low</div>\r\n                        <div className=\"weatherInfo\" id=\"sunset\">{new Date(weather.sys.sunset * 1000).toLocaleTimeString().slice(0, 5)} sunset</div>\r\n\r\n                    </div>\r\n                    </div>\r\n                    </div>                                     \r\n\r\n                    </div>\r\n                    ) : (\"\")}\r\n                </main>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' }\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport styles from \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}